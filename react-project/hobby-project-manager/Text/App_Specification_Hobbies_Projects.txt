אפיון מפורט לאפליקציה לניהול תחביבים ופרויקטים אישיים

1. תיאור כללי
האפליקציה נועדה לנהל תחביבים ופרויקטים אישיים בצורה מסודרת. המשתמשים יוכלו להוסיף תחביבים, לנהל פרויקטים, להגדיר מטרות, ולעקוב אחרי התקדמותם. האפליקציה תכלול גם אפשרויות לשיתוף עם אחרים, קבלת משוב, והתראות מותאמות אישית.

2. דרישות טכניות
2.1. טכנולוגיות פיתוח

Frontend: React.js, Redux (לניהול מצב), CSS/SCSS עבור עיצוב.
Backend: Node.js עם Express, MongoDB לניהול מסד הנתונים.
Authentication: JWT עבור אימות משתמשים.
Deploy: Heroku/AWS/Google Cloud עבור אירוח ופריסה.
2.2. מסד נתונים

MongoDB: לניהול תחביבים, פרויקטים, משתמשים, והיסטוריית התקדמות.
Schemas:
User: userId, username, email, password, profileImage, hobbies, projects
Hobby: hobbyId, userId, name, description, progress
Project: projectId, userId, name, description, startDate, endDate, status, tasks
Task: taskId, projectId, name, description, dueDate, status, progress
2.3. API

Routes:
Users: /api/users - ניהול משתמשים (הוספה, עריכה, מחיקה)
Hobbies: /api/hobbies - ניהול תחביבים (הוספה, עריכה, מחיקה, התקדמות)
Projects: /api/projects - ניהול פרויקטים (הוספה, עריכה, מחיקה, שלבים, משימות)
Tasks: /api/tasks - ניהול משימות (הוספה, עריכה, מחיקה)
Auth: /api/auth - הרשמה, התחברות, אימות
3. תיאור הפיצ'רים
3.1. מעקב אחרי תחביבים

3.1.1 יצירת רשימות

תיאור: מאפשר למשתמשים להוסיף תחביבים עם פרטים שונים.
דרישות:
טופס הוספה עם שדות: שם תחביב, תיאור.
כפתור לשמירה.
3.1.2 תיעוד התקדמות

תיאור: מאפשר למשתמשים לתעד את התקדמותם בכל תחביב.
דרישות:
טופס הוספת התקדמות עם שדות: תאריך, הערות, תמונות.
תצוגה של ההתקדמות לפי תאריך.
3.2. תכנון פרויקטים אישיים

3.2.1 ניהול פרויקטים

תיאור: מאפשר למשתמשים לנהל פרויקטים עם שלבים ומשימות.
דרישות:
טופס הוספת פרויקט עם שדות: שם, תיאור, תאריך התחלה, תאריך סיום.
אפשרות להוסיף ולנהל שלבים (כותרת, תיאור).
אפשרות להוסיף משימות לכל שלב.
3.2.2 תכנון זמנים

תיאור: מאפשר למשתמשים להגדיר מועדים למשימות ולפרויקטים.
דרישות:
טופס הגדרת מועד עם שדות: תאריך יעד, תיאור.
התראות למועדים קרובים.
3.3. שיתוף עם אחרים

3.3.1 קבוצות וקהילות

תיאור: מאפשר למשתמשים להצטרף לקבוצות עם תחביבים דומים ולשתף רעיונות.
דרישות:
אפשרות לחפש ולהצטרף לקבוצות.
טופס ליצירת קבוצות חדשות.
ניהול חברי הקבוצה ותוכן.
3.3.2 משוב ושיתוף

תיאור: מאפשר למשתמשים לשתף פרויקטים ולקבל משוב.
דרישות:
טופס שיתוף פרויקט.
אפשרות לקבל תגובות מהמשתמשים השותפים.
3.4. התראות והודעות

3.4.1 תזכורות מותאמות אישית

תיאור: שליחת תזכורות למשתמשים לגבי משימות ומועדים חשובים.
דרישות:
טופס יצירת תזכורות.
מערכת לשליחת התראות למועדים הקרובים.
3.4.2 עדכונים על התקדמות

תיאור: עדכונים על התקדמות פרויקטים ותחביבים.
דרישות:
שליחת הודעות למשתמשים על התקדמות.
3.5. פיצ'רים מותאמים אישית

3.5.1 פרופיל אישי

תיאור: מאפשר למשתמשים להוסיף פרופיל אישי עם תחביבים מועדפים.
דרישות:
טופס לעריכת פרופיל.
הצגת פרופיל אישי.
3.5.2 התאמה אישית

תיאור: מאפשר לשנות את עיצוב האפליקציה לפי העדפות אישיות.
דרישות:
אפשרות לשנות צבעים, תמונות רקע, ופונטים.
3.6. רשימות וסטטיסטיקות

3.6.1 סטטיסטיקות התקדמות

תיאור: הצגת גרפים וסטטיסטיקות על התקדמות תחביבים ופרויקטים.
דרישות:
מערכת להצגת גרפים וסטטיסטיקות.
3.6.2 רשימות מתקדמות

תיאור: הצגת רשימות משימות עם אפשרות לסינון לפי קריטריונים שונים.
דרישות:
מערכת לסינון רשימות לפי תאריך, תחביב, סטטוס.
4. עיצוב UX/UI
4.1 עקרונות עיצוב

ממשק משתמש נקי וידידותי: התמקדות בחוויית משתמש פשוטה ויעילה.
תצוגה רספונסיבית: התאמה למסכים שונים, כולל ניידים ודסקטופ.
תמונות וגרפים: שימוש בתמונות וגרפים להמחשת התקדמות וסטטיסטיקות.
4.2 מסכים עיקריים

4.2.1 דף הבית

תצוגת תחביבים ופרויקטים נבחרים.
כפתורים לניווט לפיצ'רים נוספים.
4.2.2 דף פרופיל

פרטי משתמש, תחביבים מועדפים, והגדרות התאמה אישית.
4.2.3 דף תחביבים ופרויקטים

תצוגת רשימות עם אפשרויות הוספה, עריכה, ומחיקה.
4.2.4 דף קבוצות וקהילות

הצגת קבוצות, אפשרות להצטרף או ליצור קבוצה חדשה.
4.2.5 דף התראות

הצגת התראות ותזכורות למועדים חשובים.
5. מסמכי דרישות
5.1 דרישות פונקציונליות

שימושיות בסיסית: יצירת תחביבים, פרויקטים, ומעקב אחרי התקדמות.
שיתוף וקבוצות: אפשרויות שיתוף וקהילות.
התראות והתאמה אישית: מערכת התראות ותזכורות מותאמות אישית.
5.2 דרישות לא פונקציונליות

ביצועים: זמן טעינה מהיר וניהול נתונים יעיל.
אבטחת מידע: הצפנת נתונים ושמירה על פרטיות המשתמשים.
נגישות: עמידה בתקני נגישות למשתמשים עם צרכים מיוחדים.
5.3 דרישות טכניות

אינטגרציה עם API: תקשורת עם API חיצוניים.
תמיכה במכשירים שונים: התאמה למסכים ניידים ודסקטופ.
עיצוב מודולרי: אפשרות להרחיב את הפיצ'רים בעתיד.